// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.enzoteles.myapplication.main;

import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerOnMainComponent implements OnMainComponent {
  private Provider<OnMainMVP.MainPresenter> provideMainPresenterProvider;

  private Provider<OnMainMVP.MainInteractor> provideMainInteractorProvider;

  private DaggerOnMainComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static OnMainComponent create() {
    return builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideMainPresenterProvider =
        MainModule_ProvideMainPresenterFactory.create(builder.mainModule);

    this.provideMainInteractorProvider =
        MainModule_ProvideMainInteractorFactory.create(builder.mainModule);
  }

  @Override
  public OnMainMVP.MainPresenter provideMainPresenter() {
    return provideMainPresenterProvider.get();
  }

  @Override
  public OnMainMVP.MainInteractor provideMainInteractor() {
    return provideMainInteractorProvider.get();
  }

  public static final class Builder {
    private MainModule mainModule;

    private Builder() {}

    public OnMainComponent build() {
      if (mainModule == null) {
        this.mainModule = new MainModule();
      }
      return new DaggerOnMainComponent(this);
    }

    public Builder mainModule(MainModule mainModule) {
      this.mainModule = Preconditions.checkNotNull(mainModule);
      return this;
    }
  }
}
